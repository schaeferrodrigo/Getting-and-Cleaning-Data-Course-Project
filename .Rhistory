library(swirl)
install_from_swirl("Getting and Cleaning Data")
con <- url(" htpp://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en ")
con <- url(" http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en ")
con <- url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en ")
htmlCode = readLines(con)
close(con)
htmlCode
library(XML)
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodels=T)
html <- htmlTreeParse(url, useInternalNodes=T)
xpathSApply(html , "//title", xmValue)
xpathSApply(html , "//title", xmlValue)
hml
html
names(html)
name(html)
htmlRoot(html)
xpathSApply(html , "//td[@id='col-citedbt]" , xmlValue)
xpathSApply(html,"//td[@id='col-citedby']" , xmlValue)
xpathSApply(html,"//td[@id='col-citedby']" , xmlValue)
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodes=T)
xpathSApply(html,"//td[@id='col-citedby']",xmlValue)
xpathSApply(html,"//td{@id='col-citedby']", xmlValue)
xpathSApply(html,"//td{@id='col-citedby'}", xmlValue)
xpathSApply(html,"//td{@id='col-citedby']", xmlValue)
xpathSApply(html, "//td{@id='col-citedby']", xmlValue)
xpathSApply(html, "//td[@id='col-citedBy']", xmlValue)
html
xpathSApply(html, "//td[@id='col-citedBy']", xmlValue)
library(httr)
html2 = GET(url)
cont = content(html2, as = "text")
cont
cont = content(html2, as = "text")
parsedHtml = htmlParse(cont, asText = TRUE)
parsedHtml
xpathSApply(parsedHtml,"//title",xmlValue)
pg2 = GET("http://httpbin.org/basic-auth/user/password",authenticate("user","passwd"))
pg2
library(httr)
myapp <-outh_app("my_app", key = "66f7d366b3f132fd3ff0" , secret = "498e40e16f298543670ae5e40e46171f67ccac59")
myapp <-oauth_app("my_app", key = "66f7d366b3f132fd3ff0" , secret = "498e40e16f298543670ae5e40e46171f67ccac59")
oauth_endpoints("github")
myapp <-oauth_app("github", key = "66f7d366b3f132fd3ff0" , secret = "498e40e16f298543670ae5e40e46171f67ccac59")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
my_app <- oauth_app("github" , key = "66f7d366b3f132fd3ff0" , secret="498e40e16f298543670ae5e40e46171f67ccac59")
my_app
home_repo <- get("https://api.github.com/users/jtleek/repos")
home_repo <- get("http://api.github.com/users/jtleek/repos")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), my_app)
github_token
gtoken <- config(token = github_token)
gtoken
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
library(httr)
my_app <- oauth_app("github" , key = "66f7d366b3f132fd3ff0" , secret="498e40e16f298543670ae5e40e46171f67ccac59")
oauth_endpoints("github")
github_token <- oauth2.0_token(oauth_endpoints("github"), my_app)
gtoken <- config(token = github_token)
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
library(jsonlite)
json1 <- fromJSON(toJSON(content(req)))
names(json1)
json1
install.packages("httr")
install.packages("httr")
install.packages("httr")
install.packages("httr")
library(httr)
my_app <- oauth_app("github" , key = "66f7d366b3f132fd3ff0" , secret="498e40e16f298543670ae5e40e46171f67ccac59")
github_token <- oauth2.0_token(oauth_endpoints("github"), my_app)
github_token
gtoken <- config(token = github_token)
gtoken
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
req
oauth_endpoints("github")
install.packages("httpuv")
setwd("~/GitHub/Getting-and-Cleaning-Data-Course-Project")
data_test <- read.table("./data/UCI HAR Dataset/test/X_test.txt")
act_test <- read.table("./data/UCI HAR Dataset/test/y_test.txt") # activity
data_train <- read.table("./data/UCI HAR Dataset/train/X_train.txt") # data set -TRAIN
act_train <- read.table("./data/UCI HAR Dataset/train/y_train.txt") #activity
data_train$activity <- act_train ; data_test$activity <-act_test
class(act_train)
act_train_1 <- as.character(act_train)
?gsub
act_train_2 <- gsub(c("1","2","3","4","5") , c("Walk", "Walk up", "walk Down" ,"Sitting", "Standing","Laying" ), act_train_1,fixed = TRUE)
act_train_2 <- gsub(c"1" , "Walk" ), act_train_1,fixed = TRUE)
act_train_2 <- gsub("1" , "Walk" ), act_train_1,fixed = TRUE)
act_train_2 <- gsub("1" , "Walk" , act_train_1,fixed = TRUE)
act_train_1 <-as.numeric(act_train_1)
act_train_2 <- gsub("5" , "standing" , act_train_1,fixed = TRUE)
act_train <- read.table("./data/UCI HAR Dataset/train/y_train.txt") #activity
act_train_1 <- as.numeric(act_train)
act_train_1 <- as.character(act_train)
?read.table
class(act_train)
data_test <- read.table("./data/UCI HAR Dataset/test/X_test.txt") # data set - TEST
act_test <- read.table("./data/UCI HAR Dataset/test/y_test.txt") # activity
data_train <- read.table("./data/UCI HAR Dataset/train/X_train.txt") # data set -TRAIN
act_train <- read.table("./data/UCI HAR Dataset/train/y_train.txt") #activity
str(act_test)
summarry(act_test)
summary(act_test)
factor(act_test)
teste_1 <-factor(as.list(act_test))
?factor
teste_1 <-factor(as.character(act_test))
teste_1
test_1 <- gsub("1","Walk",act_train)
test_1 <- gsub("2","Walk_up",act_train)
test_1 <- gsub("3","Walk down",act_train)
test_1 <- gsub("4","Walk down",act_train)
levels(act_train)
test_1 <- gsub("4","Walk down",act_train)%gsub("2","Walk_up",act_train)
test_1 <- gsub("4","Walk down",act_train)&gsub("2","Walk_up",act_train)
test_1 <- gsub("4","Walk down",act_train)^gsub("2","Walk_up",act_train)
test_1 <- gsub("4","Walk down",act_train)%>%gsub("2","Walk_up",act_train)
act_test[,1]
summary(act_test)
str(act_test)
data_test <- read.table("./data/UCI HAR Dataset/test/X_test.txt",na.strings = "Not Available", stringsAsFactors = FALSE) # data set - TEST
act_test <- read.table("./data/UCI HAR Dataset/test/y_test.txt",na.strings = "Not Available", stringsAsFactors = FALSE) # activity
data_train <- read.table("./data/UCI HAR Dataset/train/X_train.txt",na.strings = "Not Available", stringsAsFactors = FALSE) # data set -TRAIN
act_train <- read.table("./data/UCI HAR Dataset/train/y_train.txt",na.strings = "Not Available", stringsAsFactors = FALSE)
summary(act_train)
str(act_train)
levels(act_test[,1])
act_test <- act[,1]
act_test <- act_test[,1]
act_test <- as.character(act[,1])
act_test <- as.character(act_test[,1])
act_test <- as.character(act_test)
act <- read.table("./data/UCU HAR Dataset/activity_labels.txt")
act <- read.table("./data/UCI HAR Dataset/activity_labels.txt")
act <- act[,2]
act <- as.character(act)
act[1]
for (i in 1:6){ text <- as.character(i)
act_test<- sub(text , act[i], act_test )
}
act_test <- as.character(act_test[,1])
act_train <- as.character(act_train[,1])
for (i in 1:6){ text <- as.character(i)
act_test<- sub(text , act[i], act_test )
act_train<-sub(text,act[i],act_train)
}
data_train$activity <- act_train ; data_test$activity <-act_test
names <- read.table("./data/UCI HAR Dataset/features.txt") # variables' names
names <- names[,2]
names <- as.character(names)
names(data_test)
names(data_test) <- names ; names(data_train) <- names # changin the variables' of data sets
names(data_test)
data_test <- read.table("./data/UCI HAR Dataset/test/X_test.txt",na.strings = "Not Available", stringsAsFactors = FALSE) # data set - TEST
act_test <- read.table("./data/UCI HAR Dataset/test/y_test.txt",na.strings = "Not Available", stringsAsFactors = FALSE) # activity
data_train <- read.table("./data/UCI HAR Dataset/train/X_train.txt",na.strings = "Not Available", stringsAsFactors = FALSE) # data set -TRAIN
act_train <- read.table("./data/UCI HAR Dataset/train/y_train.txt",na.strings = "Not Available", stringsAsFactors = FALSE) #activity
act <- read.table("./data/UCI HAR Dataset/activity_labels.txt")
act <- as.character(act[,2])
names <- read.table("./data/UCI HAR Dataset/features.txt") # variables' names
names <- names[,2]
names <- as.character(names)
names(data_test) <- names ; names(data_train) <- names # changin the variables' of data sets
act_test <- as.character(act_test[,1])
act_train <- as.character(act_train[,1])
for (i in 1:6){ text <- as.character(i)
act_test<- sub(text , act[i], act_test )
act_train<-sub(text,act[i],act_train)
}
data_train$activity <- act_train ; data_test$activity <-act_test
names(data_test)
2947+7352
10299*0.7
library(plyr)
merged_data <- join(data_train,data_test)
?join
library(plyr)
merged_data <- merge(data_train,data_test)
?merge
library(plyr)
merged_data <- merge(data_train,data_test,"row.names)"
library(plyr)
merged_data <- merge(data_train,data_test,"row.names)"
library(plyr)
merged_data <- merge(data_train,data_test,"row.names")
?merge
library(plyr)
merged_data <- merge(data_train,data_test,"row.names",all = TRUE)
library(plyr)
merged_data <- merge(data_train,data_test,"row.names")
library(plyr)
merged_data <- rbind(data_train,data_test)
std <- grep("std()",names(merged_data ), fixed = TRUE)
mean <- grep("mean()", names(merged_data), fixed = TRUE)
collumns <- sort(c(mean,std))
selcted_data <- merged_data[,collumns]
activities <- c(act_train , act_test)
data_test <- read.table("./data/UCI HAR Dataset/test/X_test.txt",na.strings = "Not Available", stringsAsFactors = FALSE) # data set - TEST
act_test <- read.table("./data/UCI HAR Dataset/test/y_test.txt",na.strings = "Not Available", stringsAsFactors = FALSE) # activity
data_train <- read.table("./data/UCI HAR Dataset/train/X_train.txt",na.strings = "Not Available", stringsAsFactors = FALSE) # data set -TRAIN
act_train <- read.table("./data/UCI HAR Dataset/train/y_train.txt",na.strings = "Not Available", stringsAsFactors = FALSE) #activity
act <- read.table("./data/UCI HAR Dataset/activity_labels.txt")
act <- as.character(act[,2])
#
names <- read.table("./data/UCI HAR Dataset/features.txt") # variables' names
names <- names[,2]
names <- as.character(names)
names(data_test) <- names ; names(data_train) <- names # changin the variables' of data sets
#
act_test <- as.character(act_test[,1])
act_train <- as.character(act_train[,1])
for (i in 1:6){ text <- as.character(i)
act_test<- sub(text , act[i], act_test )
act_train<-sub(text,act[i],act_train)
}
#data_train$activity <- act_train ; data_test$activity <-act_test
activities <- c(act_train , act_test)
#
library(plyr)
merged_data <- merged_data <- rbind(data_train,data_test)
#
std <- grep("std()",names(merged_data ), fixed = TRUE)
mean <- grep("mean()", names(merged_data), fixed = TRUE)
collumns <- sort(c(mean,std))
selcted_data <- merged_data[,collumns]
names(selcted_data)
names(selcted_data) <- gsub("()","",names(selcted_data) )
names(selcted_data)
names(selcted_data) <- gsub("()","",names(selcted_data) ,fixed = TRUE)
names(selcted_data)
names(selcted_data) <- gsub("BodyACC","LinearAcc",names(selcted_data) )
names(selcted_data)
names(selcted_data) <- gsub("BodyACC","LinearAcc",names(selcted_data) , fixed = TRUE)
names(selcted_data)
names(selcted_data) <- gsub("BodyAcc","LinearAcc",names(selcted_data) ,fixed = TRUE)
names(selcted_data)
names(selcted_data) <- gsub("GyroAcc","AngularAcc",names(selcted_data) ,fixed = TRUE)
names(selcted_data)
names(selcted_data) <- gsub("BodyGyro","AngularVel",names(selcted_data) ,fixed = TRUE)
names(selcted_data)
library(plyr)
?ddply
selcted_data_data$activities <- activities
selcted_data$activities <- activities
MEAN <- ddply(selcted_data,.(activities) , summarize , function = mean)
MEAN <- ddply(selcted_data,.(activities) , summarize , function = mean(,selcted_data[1:66]))
MEAN <- ddply(selcted_data,.(activities) , summarize , mean(,selcted_data[1:66]))
MEAN <- ddply(selcted_data,.(activities) , summarize , mean(selcted_data[,1:66]))
MEAN <- ddply(selcted_data,.(activities) , summarize , lapply(selcted_data[,1:66]))
MEAN <- ddply(selcted_data,.(activities) , summarize , FUN = lapply(selcted_data[,1:66]))
MEAN <- ddply(selcted_data,.(activities) , summarize , FUN = mean)
class(selcted_data[,1])
?summarize
sumarize(selcted_data, avg= mean(activities))
library(dplyr)
sumarize(selcted_data, avg= mean(activities))
summarize(selcted_data, avg= mean(activities))
summarize(selcted_data, avg= mean(1:66))
by_activities <- group_by(selcted_data,activities)
by_activities[1]
View(by_activities)
View(by_activities)
maply(by_activities[1], mean)
mapply(selcted_data,mean)
mapply(selcted_data[,1:66],mean)
tapply(selcted_data, .(activities) , mean)
tapply(selcted_data, .(activities) , summarize ,mean)
class(activities)
ddply(selcted_data, .(activities) , summarize ,mean)
ddply(selcted_data, .(activities)  ,mean)
ddply(selcted_data, .(activities)  ,mean)
ddply(selcted_data, .(activities),summarize ,mean)
ddply(selcted_data, .(activities),summarize ,sum)
ddply(selcted_data, .(activities),summarize ,sum)
apply(by_activities[1], mean)
apply(by_activities[1], FUN =mean)
class(by_activities)
class(by_activities[1])
class(by_activities[[1]])
apply(by_activities[[1]], FUN =mean)
apply(by_activities[[1]],1, FUN =mean)
data_1 <-selcted_data[selcted_data$activities==act[1] ,1:66]
View(data_1)
View(data_1)
aplly(data_1,mean)
apply(data_1,mean)
?apply
?mapply
?mapply(mean, data_1)
mapply(mean, data_1)
class(mapply(mean, data_1))
x_1 <- mapply(mean, data_1)
?sapply
x_1 <- sapply(mean, data_1)
x_1 <- sapply(data_1,mean)
x_1
names(x_1)
rbind
?rbind
z <- c()
for (i in 1:6){data_1 <- selcted_data[selcted_data$activities==act[i],]
x <- sapply(data_1, mean)
mean<- rbind(z,x)
}
z <- c()
for (i in 1:6){data_1 <- selcted_data[selcted_data$activities==act[i],1:66]
x <- sapply(data_1, mean)
mean<- rbind(z,x)
}
View(mean)
View(mean)
mean <- c()
for (i in 1:6){data_1 <- selcted_data[selcted_data$activities==act[i],1:66]
x <- sapply(data_1, mean)
mean<- rbind(mean,x)
}
View(mean)
View(mean)
mean <-as.data.frame(mean)
sd <- c()
for (i in 1:6){data_1 <- selcted_data[selcted_data$activities==act[i],1:66]
x <- sapply(data_1, sd)
sd<- rbind(sd,x)
}
mean$activities <- act
names(mean) <- names(selcted_data)
View(mean)
View(mean)
View(sd)
View(sd)
sd$activities <- act
names(sd) <- names(selcted_data)
sd <- c()
for (i in 1:6){data_1 <- selcted_data[selcted_data$activities==act[i],1:66]
x <- sapply(data_1, sd)
sd<- rbind(sd,x)
}
sd$activities <- act
names(sd) <- names(selcted_data)
sd <- c()
for (i in 1:6){data_1 <- selcted_data[selcted_data$activities==act[i],1:66]
x <- sapply(data_1, sd)
sd<- rbind(sd,x)
}
sd <- as.data.frame(sd)
sd$activities <- act
names(sd) <- names(selcted_data)
# Reading data sets
data_test <- read.table("./data/UCI HAR Dataset/test/X_test.txt",na.strings = "Not Available", stringsAsFactors = FALSE) # data set - TEST
act_test <- read.table("./data/UCI HAR Dataset/test/y_test.txt",na.strings = "Not Available", stringsAsFactors = FALSE) # activity
data_train <- read.table("./data/UCI HAR Dataset/train/X_train.txt",na.strings = "Not Available", stringsAsFactors = FALSE) # data set -TRAIN
act_train <- read.table("./data/UCI HAR Dataset/train/y_train.txt",na.strings = "Not Available", stringsAsFactors = FALSE) #activity
act <- read.table("./data/UCI HAR Dataset/activity_labels.txt") # activities
act <- as.character(act[,2])
# Getting the variables' names
names <- read.table("./data/UCI HAR Dataset/features.txt") # variables' names
names <- names[,2]
names <- as.character(names)
names(data_test) <- names ; names(data_train) <- names
#Merges the training and the test sets to create one data set.
library(plyr)
merged_data <- merged_data <- rbind(data_train,data_test)
#Extracts only the measurements on the mean and standard deviation for each measurement.
std <- grep("std()",names(merged_data ), fixed = TRUE)
mean <- grep("mean()", names(merged_data), fixed = TRUE)
collumns <- sort(c(mean,std))
selcted_data <- merged_data[,collumns]
#Uses descriptive activity names to name the activities in the data set
act_test <- as.character(act_test[,1])
act_train <- as.character(act_train[,1])
for (i in 1:6){ text <- as.character(i)
act_test<- sub(text , act[i], act_test )
act_train<-sub(text,act[i],act_train)
}
activities <- c(act_train , act_test)
selcted_data$activities <- activities
#Appropriately labels the data set with descriptive variable names.
names(selcted_data) <- gsub("()","",names(selcted_data) ,fixed = TRUE)
#From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
mean <- c()
for (i in 1:6){data_1 <- selcted_data[selcted_data$activities==act[i],1:66]
x <- sapply(data_1, mean)
mean<- rbind(mean,x)
}
mean<- as.data.frame(mean)
mean$activities <- act
names(mean) <- names(selcted_data)
sd <- c()
for (i in 1:6){data_1 <- selcted_data[selcted_data$activities==act[i],1:66]
x <- sapply(data_1, sd)
sd<- rbind(sd,x)
}
sd <- as.data.frame(sd)
sd$activities <- act
names(sd) <- names(selcted_data)
View(selcted_data)
View(selcted_data)
View(mean)
View(mean)
names(selcted_data) <- gsub("tBodyAcc","timeAcceletation",fixed = TRUE)
names(selcted_data) <- gsub("tBodyAcc","timeAcceletation",fixed = TRUE)
gsub?
?
?gsub
names(selcted_data) <- gsub("tBodyAcc" , "timeAcceletation" , fixed = TRUE)
names(selcted_data) <- gsub("()","",names(selcted_data) ,fixed = TRUE)
names(selcted_data) <- gsub("tBodyAcc",'timeAcceleration',fixed = TRUE)
names(selcted_data) <- gsub("tBodyAcc","timeAcceleration",fixed = TRUE)
names(selcted_data) <- gsub("BodyAcc","timeAcceleration",fixed = TRUE)
names(selcted_data) <- sub("BodyAcc","timeAcceleration",fixed = TRUE)
names(selcted_data) <- sub("BodyAcc",x="timeAcceleration",fixed = TRUE)
names(selcted_data) <- sub("BodyAcc",replacement = "timeAcceleration",fixed = TRUE)
names(selcted_data) <- sub(pattern ="BodyAcc",x="timeAcceleration",fixed = TRUE)
names(selcted_data) <- sub(pattern ="BodyAcc",replacement = ="timeAcceleration",fixed = TRUE)
names(selcted_data) <- sub(pattern ="BodyAcc",replacement ="timeAcceleration",fixed = TRUE)
names(selcted_data) <- sub(pattern ="BodyAcc",replacement ="timeAcceleration",fixed = TRUE)
